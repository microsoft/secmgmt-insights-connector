let
    Schema.GetEntityFromEntitySet = (entityContainer as table, value as text) =>
        let
            entity = if(Text.Contains(value, "microsoft.graph.")) then List.Last(Text.Split(value, ".")) else if(Text.Contains(value, "Collection(")) then
                    null
                else
                    let
                        entitySetValue = Table.SelectRows(entityContainer{0}[EntitySet], each [#"Attribute:Name"] = Text.BeforeDelimiter(value, "(")),
                        entityValue = if(Table.IsEmpty(entitySetValue)) then 
                                Table.SelectRows(entityContainer{0}[Singleton], each [#"Attribute:Name"] = Text.BeforeDelimiter(value, "(")) 
                            else
                                entitySetValue,
                        entity = if(Table.IsEmpty(entitySetValue)) then 
                                Text.Split(entityValue{0}[#"Attribute:Type"], "."){2}
                            else 
                                Text.Split(entityValue{0}[#"Attribute:EntityType"], "."){2}
                    in 
                        entity
        in 
            entity,

    Schema.GetEntityFromSingleton = (entityContainer as table, entityType as table, values as list) =>
        let 
            singletonTable = entityContainer{0}[Singleton],
            singletonValue = Table.SelectRows(singletonTable, each [#"Attribute:Name"] = values{0}),
            singleton = Text.Split(singletonValue{0}[#"Attribute:Type"], "."){2},
        
            filtered = Table.SelectRows(entityType, each [#"Attribute:Name"] = singleton),
            property = if(filtered{0}[Property] <> null) then Table.SelectRows(filtered{0}[Property], each [#"Attribute:Name"] = values{1}) else null,

            entity = if(property <> null and not Table.IsEmpty(property)) then 
                let 
                    value = Text.Split(property{0}[#"Attribute:Type"], "."){1}
                in 
                    value
                else 
                    Schema.GetTypeFromNavigationProperty(entityType, singleton, values)
        in 
            entity,

    Schema.GetEntityProperties = (entityType as table, entity as text, tables as list) =>
        let 
            entry = Table.SelectRows(entityType, each [#"Attribute:Name"] = entity),
            properties = List.InsertRange(tables, 0, entry[Property]),
            value = if(entry{0}[#"Attribute:BaseType"] = null) then properties else @Schema.GetEntityProperties(entityType, Text.AfterDelimiter(entry{0}[#"Attribute:BaseType"], "."), properties)
        in 
            value,

    Schema.GetEntityType = (entityContainer as table, entityType as table, value as text) => 
        let 
            response = if(Text.Contains(value, "Collection(")) then 
                    let 
                        source = Text.Split(Text.BetweenDelimiters(value, "(", ")"), "."),
                        output = List.Last(source)
                    in
                        output
                else if(Text.Contains(Text.Split(value, "/"){0}, "('")) then 
                    let
                        parts = Text.Split(value, "/"),
                        removedEntity = if(List.Last(parts) = "$entity") then List.RemoveLastN(parts, 1) else parts,
                        resourceEntity = Schema.GetEntityFromEntitySet(entityContainer, Text.BeforeDelimiter(removedEntity{0}, "(")),
                        entity = Schema.GetTypeFromNavigationProperty(entityType, resourceEntity, removedEntity)
                    in 
                        entity
                else 
                    let
                        parts = Text.Split(value, "/"),
                        removedEntity = if(List.Last(parts) = "$entity") then List.RemoveLastN(parts, 1) else parts,
                        entity = if(List.Count(removedEntity) = 1) then Schema.GetEntityFromEntitySet(entityContainer, value) else Schema.GetEntityFromSingleton(entityContainer, entityType, removedEntity)
                    in 
                        entity
        in 
            response,

    Schema.GetKnownType = (metadata as table, resource as text, optional additionalTypes as text) =>
        let
            entityType = Table.SelectRows(metadata{0}[EntityType], each [#"Attribute:Name"] = resource),
            value = if(Table.IsEmpty(entityType)) then Table.SelectRows(metadata{0}[ComplexType], each [#"Attribute:Name"] = resource) else entityType,
            
            isEnumType = if(Table.IsEmpty(value)) then
                let 
                    data = Table.SelectRows(metadata{0}[EnumType], each [#"Attribute:Name"] = resource),
                    output = if(Table.IsEmpty(data)) then false else true
                in 
                    output
            else 
                false,

            GetData = (row as any) => 
                let
                    data = if(Record.HasFields(row, "Attribute:Nullable") and row[#"Attribute:Nullable"] <> null and row[#"Attribute:Nullable"] = true) then 
                        [Entity = row[#"Attribute:Name"], Type = " nullable " & GetDataType(row[#"Attribute:Type"])] 
                    else 
                        [Entity = row[#"Attribute:Name"], Type = GetDataType(row[#"Attribute:Type"])]
                in 
                    data,

            GetDataType = (value) as text =>
                if (value = "Edm.Boolean") then "logical" else if (value = "Edm.DateTimeOffset") then "datetimezone"  
                else if (value = "Edm.Int32") then "number" else if (value = "Edm.Int64") then "number" else if(value = "Edm.String") then "text" else "any",

            output = if (isEnumType) then 
                if(additionalTypes = null or additionalTypes = "") then Expression.Evaluate("type table [value = text]") else Expression.Evaluate("type table [" & additionalTypes & ", value = text]")
            else if(Table.IsEmpty(value)) then 
                null 
            else
                let 
                    // Build the schema table based on data from the property table
                    propertyTableList = Schema.GetEntityProperties(if(Table.IsEmpty(entityType)) then metadata{0}[ComplexType] else metadata{0}[EntityType], resource, {}),
                    convertedTable = Table.FromList(propertyTableList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
                    propertyTable = Table.ExpandTableColumn(convertedTable, "Column1", {"Attribute:Name", "Attribute:Type", "Attribute:Nullable"}, {"Attribute:Name", "Attribute:Type", "Attribute:Nullable"}),
                    addedSchema = Table.AddColumn(propertyTable, "schema", each GetData(_)),
                    schemaTable = Table.FromList(addedSchema[schema], Splitter.SplitByNothing(), null, null, ExtraValues.Error),
                    expandedColumn = Table.ExpandRecordColumn(schemaTable, "Column1", {"Entity", "Type"}, {"Entity", "Type"}),
                    
                    custom = Table.AddColumn(expandedColumn, "Expression", each [Entity] & " = " & [Type]),
                    output = if(additionalTypes = null or additionalTypes = "") then Expression.Evaluate("type table [" & Text.Combine(custom[Expression], ", ") & "]") else Expression.Evaluate("type table [" & additionalTypes & "," & Text.Combine(custom[Expression], ", ") & "]")
                in 
                    output
        in
            output,
    
    Schema.GetTypeFromNavigationProperty = (entityType as table, entityName as text, values as list) =>
        let
            filtered = Table.SelectRows(entityType, each [#"Attribute:Name"] = entityName),

            dataTable = if(filtered{0}[NavigationProperty] = null) then 
                        Table.SelectRows(filtered{0}[Property], each [#"Attribute:Name"] = Text.BeforeDelimiter(values{1}, "("))
                    else
                        Table.SelectRows(filtered{0}[NavigationProperty], each [#"Attribute:Name"] = Text.BeforeDelimiter(values{1}, "(")), 

            resource = dataTable{0}[#"Attribute:Type"], 
            entity = if(Text.Contains(resource, "(")) then Text.AfterDelimiter(Text.BetweenDelimiters(resource, "(", ")"), ".") else Text.AfterDelimiter(resource, "."),

            value = if(List.Count(values) <= 2) then entity else @Schema.GetTypeFromNavigationProperty(entityType, entity, List.RemoveFirstN(values, 1))
        in 
            value
in
    [ 
        GetKnownType = Schema.GetKnownType
    ]